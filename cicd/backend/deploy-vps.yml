
stages:
- stage: Deploy
  displayName: 'Deploy Prod stage'
  jobs:
  - deployment: 'VPSDeployment'   # name of the deployment job, A-Z, a-z, 0-9, and underscore. The word "deploy" is a keyword and is unsupported as the deployment name.
    displayName: 'VPS Deployment' 
    environment: vps-production
    strategy:
      runOnce:    #rolling, canary are the other strategies that are supported
        deploy:
          steps:
            - task: DownloadBuildArtifacts@1
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: AzureKeyVault@2
              inputs:
                azureSubscription: 'Azure for Students(54a8b190-aefa-4989-849f-3931ec46cb62)'
                KeyVaultName: 'auctionhouse-kv-prod'
                SecretsFilter: '*'
                RunAsPreJob: false
            - task: SSH@0
              displayName: 'Create docker secrets'
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'commands'
                # Creates secrets only if following conditions happen:
                # - secret does not exist
                # - secret exists and is not being used (stack is removed)
                # TODO logging
                commands: |
                  (docker secret ls | grep envoy_ssl_pkcs12 && docker secret rm envoy_ssl_pkcs12 2>/dev/null) || true;
                  (echo "$(pekalam-me-12)" | base64 --decode | docker secret create envoy_ssl_pkcs12 - 2>/dev/null) || true;
                  (docker secret ls | grep front_ssl_chain && docker secret rm front_ssl_chain 2>/dev/null) || true;
                  (echo "$(pekalam-me-12)" | base64 --decode | openssl pkcs12 -password pass: -clcerts -nokeys | docker secret create front_ssl_chain - 2>/dev/null) || true;
                  (docker secret ls | grep front_ssl_private && docker secret rm front_ssl_private 2>/dev/null) || true;
                  (echo "$(pekalam-me-12)" | base64 --decode | openssl pkcs12 -password pass: -nocerts -nodes | docker secret create front_ssl_private - 2>/dev/null) || true;
                  (docker secret ls | grep mongocluster-keyfile && docker secret rm mongocluster-keyfile 2>/dev/null) || true;
                  (echo "$(mongocluster-keyfile)" | docker secret create mongocluster-keyfile - 2>/dev/null) || true;
                  (docker secret ls | grep mongouser-password && docker secret rm mongouser-password 2>/dev/null) || true;
                  (echo "$(mongouser-password)" | docker secret create mongouser-password - 2>/dev/null) || true;
                readyTimeout: '20000'
            - task: CopyFilesOverSSH@0
              displayName: 'Copy artifacts to target machine'
              inputs:
                sshEndpoint: 'OVH_vps'
                sourceFolder: '$(System.ArtifactsDirectory)/drop/compose'
                contents: '**'
                targetFolder: '/home/auctionhouse/auctionhouse/test'
                readyTimeout: '20000'
            - task: SSH@0
              displayName: 'Login to private registry'
              env:
                PEKALAM-REGISTRY-PASS: $(pekalam-registry-pass)
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'commands'
                commands: '(docker login -u pekalam -p $(PEKALAM-REGISTRY-PASS) pekalam.me:5000 2>login_errorlog.txt || (cat login_errorlog.txt && exit 1)) && (test $(wc -l login_errorlog.txt | cut -d " " -f1) -gt 0 || rm login_errorlog.txt)'
                failOnStdErr: false
                readyTimeout: '20000'
            - task: SSH@0
              displayName: 'Deploy auctionhouse'
              env:
                AZURE_CLIENT_SECRET: $(AZURE_CLIENT_SECRET)
                AZURE_CLIENT_ID: $(AZURE_CLIENT_ID)
                AZURE_TENANT_ID: $(AZURE_TENANT_ID)
                APPCONFIGURATIONPROD: $(AppConfigurationProd)
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'inline'
                inline: 'cd /home/auctionhouse/auctionhouse/test && (DOCKER_REGISTRY="pekalam.me:5000/" AzureCredentials__AZURE_CLIENT_SECRET="$(AZURE_CLIENT_SECRET)" AzureCredentials__AZURE_CLIENT_ID="$(AZURE_CLIENT_ID)" AzureCredentials__AZURE_TENANT_ID="$(AZURE_TENANT_ID)" APP_ENV=prod1 ConnectionStrings__AppConfigurationProd="$(APPCONFIGURATIONPROD)" docker stack deploy --with-registry-auth -c infrastructure/docker-compose.yml -c infrastructure/docker-compose.prod.yml -c infrastructure/mongodb/docker-compose.yml -c infrastructure/mongodb/docker-compose.volumes.yml -c front/docker-compose.yml -c front/docker-compose.prod.yml -c webAPI/docker-compose.yml -c webAPI/docker-compose.prod.yml auctionhouse 2>deploy_errorlog.txt || (cat deploy_errorlog.txt && exit 1)) && (test $(wc -l deploy_errorlog.txt | cut -d " " -f1) -gt 0 || rm deploy_errorlog.txt)'
                failOnStdErr: false
                readyTimeout: '20000'
            - task: SSH@0
              displayName: 'Run post-deployment script on target machine'
              inputs:
                sshEndpoint: 'OVH_vps'
                runOptions: 'commands'
                commands: 'bash /home/auctionhouse/auctionhouse/post-deployment.sh'
                readyTimeout: '20000'
